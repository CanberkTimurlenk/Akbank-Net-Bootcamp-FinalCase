// <auto-generated />
using System;
using FinalCase.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalCase.Data.Migrations
{
    [DbContext(typeof(FinalCaseDbContext))]
    partial class FinalCaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalCase.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1985, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "john.doe@example.com",
                            Firstname = "John",
                            Iban = "TR777777777777777777777777",
                            InsertDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = true,
                            LastActivityDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "Doe",
                            Password = "ba394499b56b89fe5bda1338fcca6a04",
                            Role = "employee",
                            Username = "johndoe"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1990, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alice.brown@example.com",
                            Firstname = "Alice",
                            Iban = "TR666666666666666666666666",
                            InsertDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = true,
                            LastActivityDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "Brown",
                            Password = "14e1b600b1fd579f47433b88e8d85291",
                            Role = "employee",
                            Username = "alicebrown"
                        },
                        new
                        {
                            Id = 3,
                            DateOfBirth = new DateTime(1990, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "example@mail.com",
                            Firstname = "admin",
                            InsertDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = true,
                            LastActivityDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Lastname = "user",
                            Password = "71b6551474932fda956136e87886017c",
                            Role = "admin",
                            Username = "adminnn"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Receipt for business trip expenses",
                            ExpenseId = 1,
                            InsertDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "Business Trip Receipt",
                            Url = "/documents/business_trip_receipt.pdf"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Invoice for office supplies",
                            ExpenseId = 2,
                            InsertDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 2,
                            IsActive = false,
                            Name = "Office Supplies Invoice",
                            Url = "/documents/office_supplies_invoice.pdf"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Photos from the team dinner",
                            ExpenseId = 3,
                            InsertDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "Team Dinner Photos",
                            Url = "/documents/team_dinner_photos.zip"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReviewerAdminId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amount = 120.50m,
                            CategoryId = 1,
                            CreatorEmployeeId = 1,
                            Date = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeDescription = "Business trip to Germany",
                            InsertDate = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 1,
                            IsActive = false,
                            Location = "Frankfurt",
                            PaymentMethodId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminDescription = "Approved by the manager",
                            Amount = 75.30m,
                            CategoryId = 2,
                            CreatorEmployeeId = 2,
                            Date = new DateTime(2024, 1, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeDescription = "Purchase of office supplies",
                            InsertDate = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 2,
                            IsActive = false,
                            Location = "Office",
                            PaymentMethodId = 2,
                            Status = 2
                        },
                        new
                        {
                            Id = 3,
                            AdminDescription = "Rejected due to policy violation",
                            Amount = 200.75m,
                            CategoryId = 3,
                            CreatorEmployeeId = 1,
                            Date = new DateTime(2024, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeDescription = "Team dinner celebration",
                            InsertDate = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 1,
                            IsActive = false,
                            Location = "Local Restaurant",
                            PaymentMethodId = 3,
                            Status = 3
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Expenses related to business trips",
                            InsertDate = new DateTime(2024, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Business Trip"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Expenses for office supplies",
                            InsertDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Expenses for team events",
                            InsertDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Team Events"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Payment", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverIban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId", "ExpenseId");

                    b.HasIndex("ExpenseId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            ExpenseId = 1,
                            Amount = 100m,
                            Date = new DateTime(2024, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Business trip expenses payment",
                            PaymentMethodId = 1,
                            PaymentMethodName = "Credit Card",
                            ReceiverIban = "TR777777777777777777777777",
                            ReceiverName = "John Doe"
                        },
                        new
                        {
                            EmployeeId = 2,
                            ExpenseId = 2,
                            Amount = 75.30m,
                            Date = new DateTime(2024, 1, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Office supplies payment",
                            PaymentMethodId = 2,
                            PaymentMethodName = "Bank Transfer",
                            ReceiverIban = "TR666666666666666666666666",
                            ReceiverName = "Alice Brown"
                        },
                        new
                        {
                            EmployeeId = 1,
                            ExpenseId = 3,
                            Amount = 200.75m,
                            Date = new DateTime(2024, 1, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Team dinner payment",
                            PaymentMethodId = 3,
                            PaymentMethodName = "Cash",
                            ReceiverIban = "TR777777777777777777777777",
                            ReceiverName = "John Doe"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Payment via credit card",
                            InsertDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Credit Card"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Payment via bank transfer",
                            InsertDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Bank Transfer"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Payment in cash",
                            InsertDate = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InsertUserId = 3,
                            IsActive = false,
                            Name = "Cash"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Document", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.Expense", "Expense")
                        .WithMany("Documents")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "CreatorEmployee")
                        .WithMany("CreatedExpenses")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "ReviewerAdmin")
                        .WithMany()
                        .HasForeignKey("ReviewerAdminId");

                    b.Navigation("Category");

                    b.Navigation("CreatorEmployee");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ReviewerAdmin");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Payment", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.Expense", "Expense")
                        .WithOne("Payment")
                        .HasForeignKey("FinalCase.Data.Entities.Payment", "ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Expense");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CreatedExpenses");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
