// <auto-generated />
using System;
using FinalCase.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FinalCase.Data.Migrations
{
    [DbContext(typeof(FinalCaseDbContext))]
    [Migration("20240117173334_seed_data")]
    partial class seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FinalCase.Data.Entities.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastActivityDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("ApplicationUsers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOfBirth = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "b.doe@example.com",
                            Firstname = "John",
                            Iban = "sampleIban",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8283),
                            InsertUserId = 1,
                            IsActive = true,
                            LastActivityDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8270),
                            Lastname = "Doe",
                            Password = "samplePassword",
                            Role = "employee",
                            Username = "sampleUsername"
                        },
                        new
                        {
                            Id = 2,
                            DateOfBirth = new DateTime(1980, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "c.doe@example.com",
                            Firstname = "ffffffffff",
                            Iban = "sampleIban",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8466),
                            InsertUserId = 2,
                            IsActive = true,
                            LastActivityDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8465),
                            Lastname = "eeeeeeeeeeeeee",
                            Password = "samplePassword",
                            Role = "employee",
                            Username = "abbb"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("Documents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description",
                            ExpenseId = 1,
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8572),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "Name",
                            Url = "Url"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description",
                            ExpenseId = 1,
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8590),
                            InsertUserId = 2,
                            IsActive = false,
                            Name = "Name",
                            Url = "Url"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description",
                            ExpenseId = 1,
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8606),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "a",
                            Url = "Url"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdminDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatorEmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployeeDescription")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<int?>("ReviewerAdminId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatorEmployeeId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("ReviewerAdminId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdminDescription = "Admin Description",
                            Amount = 100m,
                            CategoryId = 1,
                            CreatorEmployeeId = 1,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8498),
                            EmployeeDescription = "Employee Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8503),
                            InsertUserId = 1,
                            IsActive = false,
                            Location = "Location",
                            PaymentMethodId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 2,
                            AdminDescription = "Admin Description",
                            Amount = 100m,
                            CategoryId = 1,
                            CreatorEmployeeId = 2,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8527),
                            EmployeeDescription = "Employee Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8528),
                            InsertUserId = 2,
                            IsActive = false,
                            Location = "Location",
                            PaymentMethodId = 1,
                            Status = 1
                        },
                        new
                        {
                            Id = 3,
                            AdminDescription = "Admin Description",
                            Amount = 100m,
                            CategoryId = 1,
                            CreatorEmployeeId = 1,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8547),
                            EmployeeDescription = "Employee Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8549),
                            InsertUserId = 1,
                            IsActive = false,
                            Location = "Location",
                            PaymentMethodId = 1,
                            Status = 1
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ExpenseCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8630),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "b"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8649),
                            InsertUserId = 2,
                            IsActive = false,
                            Name = "c"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8664),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "d"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Payment", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverIban")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EmployeeId", "ExpenseId");

                    b.HasIndex("ExpenseId")
                        .IsUnique();

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            ExpenseId = 1,
                            Amount = 100m,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8789),
                            Description = "Description",
                            PaymentMethodId = 1,
                            PaymentMethodName = "PaymentMethodName",
                            ReceiverIban = "ReceiverIban",
                            ReceiverName = "ReceiverName"
                        },
                        new
                        {
                            EmployeeId = 1,
                            ExpenseId = 2,
                            Amount = 200m,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8812),
                            Description = "Description",
                            PaymentMethodId = 1,
                            PaymentMethodName = "PaymentMethodName",
                            ReceiverIban = "ReceiverIban",
                            ReceiverName = "ReceiverName"
                        },
                        new
                        {
                            EmployeeId = 1,
                            ExpenseId = 3,
                            Amount = 300m,
                            Date = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8833),
                            Description = "Description",
                            PaymentMethodId = 1,
                            PaymentMethodName = "PaymentMethodName",
                            ReceiverIban = "ReceiverIban",
                            ReceiverName = "ReceiverName"
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("InsertDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("InsertUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8687),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "b"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8707),
                            InsertUserId = 2,
                            IsActive = false,
                            Name = "a"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description",
                            InsertDate = new DateTime(2024, 1, 17, 20, 33, 33, 537, DateTimeKind.Local).AddTicks(8724),
                            InsertUserId = 1,
                            IsActive = false,
                            Name = "x   "
                        });
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Document", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.Expense", "Expense")
                        .WithMany("Documents")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "CreatorEmployee")
                        .WithMany("CreatedExpenses")
                        .HasForeignKey("CreatorEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "ReviewerAdmin")
                        .WithMany()
                        .HasForeignKey("ReviewerAdminId");

                    b.Navigation("Category");

                    b.Navigation("CreatorEmployee");

                    b.Navigation("PaymentMethod");

                    b.Navigation("ReviewerAdmin");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Payment", b =>
                {
                    b.HasOne("FinalCase.Data.Entities.ApplicationUser", "Employee")
                        .WithMany("Payments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.Expense", "Expense")
                        .WithOne("Payment")
                        .HasForeignKey("FinalCase.Data.Entities.Payment", "ExpenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinalCase.Data.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Expense");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ApplicationUser", b =>
                {
                    b.Navigation("CreatedExpenses");

                    b.Navigation("Payments");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.Expense", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("FinalCase.Data.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
